class KlaviyoFormComponent extends HTMLElement {
    constructor() {
      super();
    }
  
    connectedCallback() {
      this.form = this.querySelector('.form-klaviyo-newsletter');
      this.form.addEventListener('submit', this.onSubmit.bind(this));
    }
  
    onSubmit(event) {
      event.preventDefault();
      // Add any additional logic or validation here
      const emailInput = this.form.querySelector('input[name="contact[email]"]').value;
  
      const url = 'https://a.klaviyo.com/client/subscriptions/?company_id=VX8mak';
  
      const data = {
        data: {
          type: "subscription",
          attributes: {
            list_id: "WfCnpp",
            email: emailInput,
          }
        }
      };
  
      fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Revision': '2023-06-15'
        },
        body: JSON.stringify(data)
      })
        .then(data => {
          if(data.ok){
            this.querySelector('.form_on_success').style.display = "block";
            this.querySelector('.fieldset-with-submit').style.display = "none";
          }
          else{
            this.querySelector('.form_on_danger').style.display = "block";
            const submitButton = this.form.querySelector('button[type="submit"]');
  
          }
        })
        .catch(errors => {
          this.querySelector('form-klaviyo-newsletter .form_on_danger').style.display = "block";
          const submitButton = this.form.querySelector('button[type="submit"]');
          submitButton.setAttribute('aria-busy', 'false');
        });
    }
  }
  
  customElements.define('form-klaviyo-newsletter', KlaviyoFormComponent);



  class StripePaymentButtonsComponent extends HTMLElement {
    constructor() {
      super();
    }
  
    connectedCallback() {
      this.buttons = this.querySelectorAll('.btn');
      
      
      const updateButtonOptions = ({detail}) => {
        if(this.buttons){
          this.buttons.forEach(button => {
            if(button.getAttribute('data-variant-id')==detail.variant.id){
              button.style.display = 'initial';
            }
            else{
              button.style.display = 'none';
            }
          })
        }

        //update also prices
        const pricesList = document.querySelectorAll('.price-option-variant')
        pricesList.forEach(button => {
          if(button.getAttribute('data-variant-id')==detail.variant.id){
            button.style.display = 'flex';
          }
          else{
            button.style.display = 'none';
          }
        })
      }

      document.addEventListener('theme:variant:change', updateButtonOptions);
    }
  }



  class RadioButton extends HTMLElement {
    constructor() {
      super();
      
      this.input = this.querySelector('.radio__input');
      this.label = this.querySelector('.radio__label');
      
      this.input.addEventListener('change', this.handleInputChange.bind(this));
      this.addEventListener('click', ()=> {
        this.label.click();
      });
    }
    
    connectedCallback() {
      // Initial setup
      this.handleInputChange();
    }
    
    handleInputChange() {
      const name = this.getAttribute('data-name');
      const value = this.getAttribute('data-value');

      const radioButtons = document.querySelectorAll(`radio-button`);
      radioButtons.forEach((button) => {
        button.classList.remove('checked');
      });
      
      this.setCheckedState(name, value);
      if (this.input.checked) {
        this.classList.add('checked');
      } else {
        this.classList.remove('checked');
      }
    }
    
    setCheckedState(name, value) {
      const radioButtons = document.querySelectorAll(`[data-name="${name}"][data-value="${value}"]`);
      radioButtons.forEach((button) => {
        const input = button.querySelector('.radio__input');
        input.checked = true;
      });
    }
  }
  
  customElements.define('radio-button', RadioButton);
  
  customElements.define('stripe-payment-buttons', StripePaymentButtonsComponent);